Problem 3 (lvl2 part2)

----------------------------------------------------------------------------------------------------
Don't Get Volunteered!
======================

As a henchman on Commander Lambda's space station, you're expected to be resourceful, 
smart, and a quick thinker. It's not easy building a doomsday device and capturing 
bunnies at the same time, after all! In order to make sure that everyone working for 
her is sufficiently quick-witted, Commander Lambda has installed new flooring outside 
the henchman dormitories. It looks like a chessboard, and every morning and evening 
you have to solve a new movement puzzle in order to cross the floor. That would be 
fine if you got to be the rook or the queen, but instead, you have to be the knight.
 Worse, if you take too much time solving the puzzle, you get "volunteered" as a test
 subject for the LAMBCHOP doomsday device!

To help yourself get to and from your bunk every day, write a function called 
answer(src, dest) which takes in two parameters: the source square, on which you start, 
and the destination square, which is where you need to land to solve the puzzle.  
The function should return an integer representing the smallest number of moves it 
will take for you to travel from the source square to the destination square using 
a chess knight's moves (that is, two squares in any direction immediately followed 
by one square perpendicular to that direction, or vice versa, in an "L" shape).  
Both the source and destination squares will be an integer between 0 and 63, 
inclusive, and are numbered like the example chessboard below:

-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) src = 19
    (int) dest = 36
Output:
    (int) 1

Inputs:
    (int) src = 0
    (int) dest = 1
Output:
    (int) 3
---------------------------------------------------------------------------------------------------


Solution.java

--------------------------------------------------------------------------------------------------
package com.google.challenges;


import java.util.LinkedList;
import java.util.Queue;

public class Answer3 {
	
	private static final int BLANK = -1;
	private static int rowLen;
	private static int colLen;
	private int[][] board;
	private static Queue<Coordinate> queue;

	public static void main(String[] args) {
			
		
		
		System.out.println(moveKnight(19, 36));
		System.out.println(moveKnight(0, 0));
		System.out.println(moveKnight(36, 50));

	}
	
	public static int moveKnight(int src, int dest){
		if(src == 0 && dest == 0 ){
			return 0;
		}else if(src == dest){
			return 0;
		} 
		else if (src-dest == 15|| src-dest == -15|| src-dest == 17|| src-dest == -17|| src-dest == -10||
				src-dest == -10||src-dest == 6||src-dest == -6){
			return 1;
		} else{
			int[][] board = 
				  { { -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },

					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 } };

			rowLen = board.length;
			colLen = board[0].length;
			//int hops=	path(board, 0, 0,rowLen -1 ,colLen -1 );
			
			
			//Generating the Actual board
			int [][] actualBoard = new int[8][8];
			int value=0;
			
			for(int i=0; i<8; i++){
				for(int j=0; j<8; j++){
					actualBoard[i][j] = value;
					value++;
				}
			}
		
			int startX = -1, startY = -1, endX = -1, endY = -1;
			for(int i=0; i<8; i++){
				for(int j=0; j<8; j++){
					if(src == actualBoard[i][j]){
						startX=i;
						startY=j;
					}else if(dest == actualBoard[i][j]) {
						endX=i;
						endY=j;
					}
				}
			}
			
			int hops = path(board, startX, startY, endX, endY );
			return hops;
		}
	}
	
	public static int path(int[][] board, int startRow, int startCol, int endRow, int endCol) {
		queue = new LinkedList<Coordinate>();
		queue.add(new Coordinate(startRow, startCol));
		queue.add(null);  //this acts a delimiter
		board[startRow][startCol] = 0;
		int hops=0;

		while (!queue.isEmpty()) {
			Coordinate popedItem = queue.poll();

			if (popedItem == null) {
				hops++;
				queue.offer(null);
				continue;
			} 
			
				int r = popedItem.row;
				int c = popedItem.col;

				board[r][c] = hops;
				
				if(r==endRow && c==endCol)
				{
					return hops;
				}

				Coordinate[] points = validCoordinates(board, r, c);

				for (Coordinate o : points) {
					if (o != null)
						queue.add(o);
				}
		}
		return -1;
	}

	private static boolean isValid(int[][] board, int row, int col) {
		if (row >= 0 && row < colLen && col >= 0 && col < rowLen
				&& board[row][col] == BLANK)
			return true;
		return false;
	}

	public static Coordinate[] validCoordinates(int[][] board, int row, int col) {
		Coordinate[] points = new Coordinate[8];

		if (isValid(board, row + 2, col + 1))
			points[0] = new Coordinate(row + 2, col + 1);

		if (isValid(board, row + 1, col + 2))
			points[1] = new Coordinate(row + 1, col + 2);

		if (isValid(board, row - 1, col + 2))
			points[2] = new Coordinate(row - 1, col + 2);

		if (isValid(board, row - 2, col + 1))
			points[3] = new Coordinate(row - 2, col + 1);

		if (isValid(board, row - 2, col - 1))
			points[4] = new Coordinate(row - 2, col - 1);

		if (isValid(board, row - 1, col - 2))
			points[5] = new Coordinate(row - 1, col - 2);

		if (isValid(board, row + 1, col - 2))
			points[6] = new Coordinate(row + 1, col - 2);

		if (isValid(board, row + 2, col - 1))
			points[7] = new Coordinate(row + 2, col - 1);

		return points;
	}
}

class Coordinate implements Comparable<Coordinate> {

	public int row;
	public int col;
	public int level;

	public Coordinate() {
		row = 0;
		col = 0;
	}

	public Coordinate(int row, int col) {
		this.row = row;
		this.col = col;
		this.level = level;

	}
	@Override
	public int compareTo(Coordinate that) {
		return this.row - that.row - this.col - that.col;
	}
}